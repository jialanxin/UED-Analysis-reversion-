import scipy.io as sio
import numpy as np
import matplotlib.pyplot as plt
from bayes_opt import BayesianOptimization


def lossfunction(lr,w1,w2):
    loss = np.random.uniform()
    return -loss



bo = BayesianOptimization(lossfunction, {'lr': (1e-7, 3.0), 'w1': (1e-7,3.0), 'w2': (1e-7, 3.0)})

bo.initialize(
{
    'target':[-7.370537564667519,-27.59159308431763,-8.702170722658967,-8.630021750885921,-10000,-9.743792334985518,-27.313756237878645,-8.487234460185377,-8.536150569285885,-6.165816713789316,-8.512591541591143,-6.165853776997427,-8.495842041448,-8.86324309067235,-8.858794780183596,-8.169101702563648],
    'lr':[1.1,3.0,0.0,0.0,0.0,3.0,3.0,1.6560,1.1576,0.0,3.0000,0.0000,2.3472,3.0000, 1.3226,1.5471],
    'w1':[1.49445,3.0,0.0,3.0,0.0,1.758,0.0,3.0,1.5129,3.0,1.4175,3.0000, 0.7904, 3.0000, 3.0000, 1.8001],
    'w2':[1.49445,3.0,0.0,0.0,3.0,0.0,0.6952,1.0951,0.0,3.0,1.9998,1.4997, 1.9803,  0.7525, 3.0000,  1.1860]
}
)
bo.maximize(init_points=0, n_iter=1, acq='ucb', kappa=5)
